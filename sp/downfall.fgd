//=============================================================================
//
// Purpose: Downfall fgd
//
//=============================================================================

@include "halflife2.fgd"

@SolidClass base(Trigger) = trigger_gunfire :
	"A volumetric trigger that triggers whenever a gun is fired within it or a bullet passes through it with additional options for explosion reception."
[
	output OnGunfire(void) : "Fires when any gunfire is within its bounds."
	output OnExplosion(void) : "Fires when any explosion is within its bounds."
]

@PointClass base(Targetname, Parentname, Angles) studioprop("models/editor/spot.mdl") frustum(lightfov,nearz,farz,lightcolor,-1) = env_projectedtexture : 
	"Projected texture entity."
[
	spawnflags(flags) =
	[
		1  : "Enabled"				: 1
		2  : "Volumetric lights"	: 0
	]

	target(target_destination)	: "target" : : "target"	
	lightfov(float)				: "FOV" : "90.0" : "FOV"
	nearz(float)				: "NearZ" : "4.0" : "Near Z for projected texture"
	farz(float)					: "FarZ" : "750.0" : "Far Z for projected texture"	
	
	enableshadows(Choices) : "Enable Shadows" : 0 : "Enables/disables shadows from this projected texture." =
	[
		0 : "No"
		1 : "Yes"
	]
	shadowquality(Choices) : "Shadow Quality" : 1 : "Quality of shadows." =
	[
		0 : "Low"
		1 : "High"
	]
	lightonlytarget(Choices) : "Light Only Target" : 0 : "Limit flashlight effect to only effect target entity." =
	[
		0 : "No"
		1 : "Yes"
	]
	lightworld(Choices) : "Light World" : 1 : "Control whether flashlight effects static world geometry." =
	[
		0 : "No"
		1 : "Yes"
	]
	volumetricslod(Choices) : "Volumetrics Lod" : 1 : "" =
	[
		0 : "No"
		1 : "Yes"
	]
	flicker(Choices) : "Flicker" : 0 : "" =
	[
		0 : "No"
		1 : "Yes"
	]
	volumetricsfadedistance(float) 	: "Volumetrics fade distance" : 0 : ""
	volumetricsqualitybias(float) 	: "Volumetrics quality bias" : 1 : ""
	volumetricsmultiplier(float)	: "Volumetrics multiplier" : 2 : ""
	volumetricsquality(integer) 	: "Volumetrics quality" : 20 : ""
	
	lightcolor(color255)			: "Light Color" : "255 255 255 200" : "Light Color RGB-Intensity"
	cameraspace(integer)			: "Camera Space" : 0 : "Angles are interpreted as being relative to camera."
	
	texturename(material)				: "Texture name" : ""

	// Inputs
	input TurnOn(void)		: "Turn on the texture"
	input TurnOff(void)		: "Turn off the texture"
	input FOV(float)		: "Set FOV"
	input Target(target_destination)	: "Set Target"
	input CameraSpace(integer)	: "Set CameraSpace"
	input LightOnlyTarget(integer)	: "Set LightOnlyTarget"
	input LightWorld(integer)	: "Set LightWorld"
	input EnableShadows(integer)	: "Set EnableShadows"
	input LightColor(string)	: "Set LightColor"
	input Ambient(float)	: "Set Ambient"
	input SpotlightTexture(string)	: "Set SpotlightTexture"
	input EnableVolumetrics(integer)	: "Set EnableVolumetrics"
]

@SolidClass base(func_tracktrain) = func_train_downfall :
	"A moving platform that the player can ride. It follows a path of path_track entities.\n" +
	"NOTE: Build your train so that the front of the train is facing down the X axis. " +
	"When it spawns it will automatically rotate to face the next path_track on the path."
[
	input ApplyBrakes(float) : "Apply the brakes of the train. Given float is time to stop."
	input DisableControls(void) : "Disable control of the train."
	input EnableControls(void) : "Enable control of the train."
	input SetManualAccelSpeed(float) : "Set the speed the train accelerates at."
	input SetManualDecelSpeed(float) : "Set the speed the train accelerates at."
]

@PointClass = env_light_projected_manager : "Env Light Projected Manager"
[
]

@PointClass base(Targetname, Parentname, Angles) studio("models/editor/cone_helper.mdl") sphere() frustum(lightfov,nearz,farz,lightcolor,-1) = env_light_projected: "Projected texture entity."
[
	radius(string)				: "Enable Shadows Radius"	: "1250"	: "Distance to enable shadows"
	radiusorigin(origin) 				: "Enable Shadow Radius Origin (X Y Z)" : : "The origin of the enable shadow radius."
	target(target_destination)	: "Follow target"			:			: "target"	
	lightfov(float)				: "Field of View"			: "90.0"	: "FOV"
	nearz(float)				: "NearZ"					: "4.0"		: "Near Z for projected texture"
	farz(float)					: "FarZ"					: "750.0"	: "Far Z for projected texture"
	
	pattern(string) : "Custom Appearance" : "" : "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
	
	spawnflags(flags) =
	[
		1  : "Enabled"			: 1
	]
	enableshadows(Choices) : "Enable Shadows" : 1 : "Enables/disables shadows from this projected texture." =
	[
		0 						: "No"
		1						: "Yes"
	]
	
	linearatten(float) : "Linear Attenuation" : "100.0"	: "Linear attenuation of projected texture"
	
	filtersize(float) : "Filter size" : "0.8"	: "Filter size for the light"
	
	lightcolor(color255)		: "Light Color" : "255 255 255 200" : "Light Color RGB-Intensity"
	texturename(choices) 		: "Texture" : "effects/flashlight001" : "Texture to use, relative to materials/." =
	[
		"effects/flashlight002" : "Default"
		"effects/flashlight001" : "Flashlight"
		"effects/flashlight003" : "Crosshatched lamp"
		"effects/flashlight004" : "Big coverage"
		"effects/flashlight005" : "Car headlight"
		"effects/flashlight006" : "Full coverage (no edge)"
	]
	onlydrawifshadowed(Choices) : "Only draw if shadowed" : 0 : "Disables the projected texture completely on low end systems that can't render shadows. Use this to prevent lights bleeding through walls because the walls aren't blocking the light etc." =
	[
		0 						: "No, this light is fine without shadows"
		1						: "Yes, this light needs shadows"
	]

	// Inputs
	input Toggle(void)					: "Toggle the light"
	input TurnOn(void)					: "Turn on the texture"
	input TurnOff(void)					: "Turn off the texture"
	input SetFOV(float)					: "Set FOV"
	input SpotlightTexture(string)		: "Set the texture"
	input SetPattern(string)			: "Set the pattern"
	input LightColor(color255)			: "Set the light colour"
	input Target(target_destination)	: "Set the entity to follow"
	
	// Outputs
	output OnTurnOn(void)				: "When we're turned on."
	output OnTurnOff(void)				: "When we're turned off."
]